 int fd[pipe_count*2];
    int* current_fd = fd;
    int* previous_fd;
    pid_t pid;

    for (int i = 0; i < pipe_count+1; i++)
    {
        previous_fd = current_fd -2;


        if (i < pipe_count)
            pipe(current_fd);

        if ((pid = fork()) < 0) // Fork Failed
            return SYSTEM_CALL_ERROR;
        else if (!pid) // Child Process
        {
            if (i < pipe_count)
            {
                close(current_fd[0]);
                dup2(current_fd[1], STDOUT_FILENO);
                close(current_fd[1]);

                if (!i)
                {
                    char msg[] = "Yo does this work?\n";
                    printf("%s",msg);
                    return 0;
                }
            }

            close(previous_fd[1]);
            dup2(previous_fd[0],STDIN_FILENO);
            close(previous_fd[0]);
           
            printf("Stage [%d]\n",i);

            for (int c = 0; (c = getchar()) != EOF;)
                putchar(c);

            return 0;
        }

        if (i)
        {
            close(previous_fd[0]);
            close(previous_fd[1]);
            
        }

        current_fd += 2;
